#!/bin/bash

#####################
# Test exit states
#####################

./main > /dev/null
state_zero=`echo $?`

./main 1 > /dev/null
state_one=`echo $?`

./main 0 > /dev/null
state_zero=`echo $?`

./main 7 > /dev/null
state_seven=`echo $?`

./main nonsense > /dev/null
state_nonsense=`echo $?`

if [[ ! $state_zero -eq 1 ]]; then
  echo "Incorrect: call without arguments must result in an exit state of 1"
  exit 1
fi

if [[ ! $state_one -eq 0 ]]; then
  echo "Incorrect: call with one valid argument must result in an exit state of 0"
  exit 1
fi

if [[ ! $state_zero -eq 1 ]]; then
  echo "Incorrect: call with 0 or lower must result in an exit state of 1"
  exit 1
fi

if [[ ! $state_seven -eq 1 ]]; then
  echo "Incorrect: call with 7 or higher must result in an exit state of 1"
  exit 1
fi

if [[ ! $state_nonsense -eq 1 ]]; then
  echo "Incorrect: call with one nonsense argument must result in an exit state of 1"
  exit 1
fi

#####################
# Test output
#####################

# Create expected result
echo "one" > expected_1.txt
echo "two" > expected_2.txt
echo "three" > expected_3.txt
echo "four" > expected_4.txt
echo "five" > expected_5.txt
echo "six" > expected_6.txt

# Create the actual result
./main 1 > created_1.txt
./main 2 > created_2.txt
./main 3 > created_3.txt
./main 4 > created_4.txt
./main 5 > created_5.txt
./main 6 > created_6.txt

# Compare results
if ! cmp --silent created_1.txt expected_1.txt; then
  echo "Incorrect: call with 1 does not give correct result"
  exit 1
fi

if ! cmp --silent created_2.txt expected_2.txt; then
  echo "Incorrect: call with 2 does not give correct result"
  exit 1
fi

if ! cmp --silent created_3.txt expected_3.txt; then
  echo "Incorrect: call with 3 does not give correct result"
  exit 1
fi

if ! cmp --silent created_4.txt expected_4.txt; then
  echo "Incorrect: call with 4 does not give correct result"
  exit 1
fi

if ! cmp --silent created_5.txt expected_5.txt; then
  echo "Incorrect: call with 5 does not give correct result"
  exit 1
fi

if ! cmp --silent created_6.txt expected_6.txt; then
  echo "Incorrect: call with 6 does not give correct result"
  exit 1
fi

rm expected_*.txt
rm created_*.txt
#####################
# Test misc
#####################

# Avoid endls
n=`cat main.cpp | egrep "endl" | wc -l`
if [ ! "$n" -eq "0" ]; then
  echo "Error: C++ Core Guidelines: SL.io.50: Avoid endl"
  exit 1
fi

# Catch exceptions by reference
n=`cat main.cpp | egrep "invalid_argument\s*\w*\s*\)" | wc -l`
if [ ! "$n" -eq "0" ]; then
  echo "Error: C++ Core Guidelines: E.15: Catch exceptions from a hierarchy by reference"
  exit 1
fi

n=`cat main.cpp | egrep "out_of_range\s*\w*\s*\)" | wc -l`
if [ ! "$n" -eq "0" ]; then
  echo "Error: C++ Core Guidelines: E.15: Catch exceptions from a hierarchy by reference"
  exit 1
fi

n=`cat main.cpp | egrep "exception\s*\w*\s*\)" | wc -l`
if [ ! "$n" -eq "0" ]; then
  echo "Error: C++ Core Guidelines: E.15: Catch exceptions from a hierarchy by reference"
  exit 1
fi

# Exceptions should be const
n=`cat main.cpp | egrep "\(\w*(std::)?invalid_argument" | wc -l`
if [ ! "$n" -eq "0" ]; then
  echo "Error: C++ Core Guidelines: Con.4: Use const to define objects with values that do not change after construction"
  exit 1
fi

n=`cat main.cpp | egrep "\(\w*(std::)?out_of_range" | wc -l`
if [ ! "$n" -eq "0" ]; then
  echo "Error: C++ Core Guidelines: Con.4: Use const to define objects with values that do not change after construction"
  exit 1
fi

n=`cat main.cpp | egrep "\(\w*(std::)?exception" | wc -l`
if [ ! "$n" -eq "0" ]; then
  echo "Error: C++ Core Guidelines: Con.4: Use const to define objects with values that do not change after construction"
  exit 1
fi

# Do not use ellipsis
n=`cat main.cpp | egrep "\(\w*\.\.\.\w*\)" | wc -l`
if [ ! "$n" -eq "0" ]; then
  echo "Error: do not use ellipsis"
  exit 1
fi

echo "Correct"
