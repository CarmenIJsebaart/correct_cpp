#!/bin/bash

qmake

##########################################
# Test release version
##########################################
make release

if [[ ! -f main ]]; then 
  echo "Incorrect: code does not compile cleanly with high warning levels"
  exit 1
fi

#####################
# Test exit states
#####################

./main > /dev/null
state_zero=`echo $?`

./main true > /dev/null
state_true=`echo $?`

./main false > /dev/null
state_false=`echo $?`

./main nonsense > /dev/null
state_nonsense=`echo $?`

./main true true > /dev/null
state_true_true=`echo $?`

if [[ ! $state_zero -eq 1 ]]; then
  echo "Incorrect: call without arguments must result in an exit state of 1"
  exit 1
fi

if [[ ! $state_true -eq 0 ]]; then
  echo "Incorrect: call with true must result in an exit state of 0"
  exit 1
fi

if [[ ! $state_false -eq 0 ]]; then
  echo "Incorrect: call with false must result in an exit state of 0"
  exit 1
fi

if [[ ! $state_nonsense -eq 1 ]]; then
  echo "Incorrect: call with one nonsense argument must result in an exit state of 1"
  exit 1
fi

if [[ ! $state_true_true -eq 1 ]]; then
  echo "Incorrect: call with two arguments must result in an exit state of 1"
  exit 1
fi

#####################
# Test output
#####################

# Create expected result
echo "heads" > expected_true.txt
echo "tails" > expected_false.txt

# Create the actual result
./main true > created_true.txt
./main false > created_false.txt

# Compare results
if ! cmp --silent created_true.txt expected_true.txt; then
  echo "Incorrect: call with true does not give correct result"
  exit 1
fi

if ! cmp --silent created_false.txt expected_false.txt; then
  echo "Incorrect: call with false does not give correct result"
  exit 1
fi

rm expected_*.txt
rm created_*.txt

#####################
# Test misc
#####################

# Avoid endls
n=`cat main.cpp | egrep "endl" | wc -l`
if [ ! "$n" -eq "0" ]; then
  echo "Error: C++ Core Guidelines: SL.io.50: Avoid endl"
  exit 1
fi

# Catch exceptions by reference
n=`cat main.cpp | egrep "invalid_argument\s*\w*\s*\)" | wc -l`
if [ ! "$n" -eq "0" ]; then
  echo "Error: C++ Core Guidelines: E.15: Catch exceptions from a hierarchy by reference"
  exit 1
fi

n=`cat main.cpp | egrep "out_of_range\s*\w*\s*\)" | wc -l`
if [ ! "$n" -eq "0" ]; then
  echo "Error: C++ Core Guidelines: E.15: Catch exceptions from a hierarchy by reference"
  exit 1
fi

n=`cat main.cpp | egrep "exception\s*\w*\s*\)" | wc -l`
if [ ! "$n" -eq "0" ]; then
  echo "Error: C++ Core Guidelines: E.15: Catch exceptions from a hierarchy by reference"
  exit 1
fi

# Exceptions should be const
n=`cat main.cpp | egrep "\(\w*(std::)?invalid_argument" | wc -l`
if [ ! "$n" -eq "0" ]; then
  echo "Error: C++ Core Guidelines: Con.4: Use const to define objects with values that do not change after construction"
  exit 1
fi

n=`cat main.cpp | egrep "\(\w*(std::)?out_of_range" | wc -l`
if [ ! "$n" -eq "0" ]; then
  echo "Error: C++ Core Guidelines: Con.4: Use const to define objects with values that do not change after construction"
  exit 1
fi

n=`cat main.cpp | egrep "\(\w*(std::)?exception" | wc -l`
if [ ! "$n" -eq "0" ]; then
  echo "Error: C++ Core Guidelines: Con.4: Use const to define objects with values that do not change after construction"
  exit 1
fi

# Do not use ellipsis
n=`cat main.cpp | egrep "\(\w*\.\.\.\w*\)" | wc -l`
if [ ! "$n" -eq "0" ]; then
  echo "Error: do not use ellipsis"
  exit 1
fi

##########################################
# Test debug version
##########################################
make debug
./main

#####################
# Test code coverage
#####################

n=`gcov-7 -i -n -o debug main.cpp| head -n 2 | tail -n 1 | egrep "100\.00\%" | wc -l`
if [ ! "$n" -eq "1" ]; then
  echo "Error: must have 100% code coverage. Current code coverage:"
  gcov-7 -i -n -o debug main.cpp | head -n 2 | tail -n 1
  exit 1
fi

