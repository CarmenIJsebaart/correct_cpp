#!/bin/bash

qmake

##########################################
# Test release version
##########################################
make release

n_errors=0

if [[ ! -f main ]]; then 
  echo "Incorrect: code does not compile cleanly with high warning levels"
  ((++n_errors))
fi

#####################
# Test exit states
#####################

./main > /dev/null
state_zero=`echo $?`

./main true > /dev/null
state_true=`echo $?`

./main false > /dev/null
state_false=`echo $?`

./main nonsense > /dev/null
state_nonsense=`echo $?`

./main true true > /dev/null
state_true_true=`echo $?`

if [[ ! $state_zero -eq 1 ]]; then
  echo "Incorrect: './bool_to_coin' must return an exit state of 1, as there are too few arguments"
  ((++n_errors))
fi

if [[ ! $state_true -eq 0 ]]; then
  echo "Incorrect: './bool_to_coin true' must return an exit state of 0"
  ((++n_errors))
fi

if [[ ! $state_false -eq 0 ]]; then
  echo "Incorrect: './bool_to_coin false' must return an exit state of 0"
  ((++n_errors))
fi

if [[ ! $state_nonsense -eq 1 ]]; then
  echo "Incorrect: './bool_to_coin nonsense' must return an exit state of 1, as 'nonsense' is not a boolean"
  ((++n_errors))
fi

if [[ ! $state_true_true -eq 1 ]]; then
  echo "Incorrect: './bool_to_coin true true' must return an exit state of 1, as there are too many arguments"
  ((++n_errors))
fi

#####################
# Test output
#####################

# Create expected result
echo "heads" > expected_true.txt
echo "tails" > expected_false.txt

# Create the actual result
./main true > created_true.txt
./main false > created_false.txt

# Compare results
if ! cmp --silent created_true.txt expected_true.txt; then
  echo "Incorrect: './bool_to_coin true' should literally display 'heads', followed by a newline"
  ((++n_errors))
fi

if ! cmp --silent created_false.txt expected_false.txt; then
  echo "Incorrect: './bool_to_coin true' should literally display 'tails', followed by a newline"
  ((++n_errors))
fi

rm expected_*.txt
rm created_*.txt

#####################
# Test misc
#####################

# Avoid endls
n=`cat main.cpp | egrep "endl" | wc -l`
if [ ! "$n" -eq "0" ]; then
  echo "Incorrect: C++ Core Guidelines: SL.io.50: Avoid endl"
  ((++n_errors))
fi

# Catch exceptions by reference
n=`cat main.cpp | egrep "invalid_argument\s*\w*\s*\)" | wc -l`
if [ ! "$n" -eq "0" ]; then
  echo "Incorrect: C++ Core Guidelines: E.15: Catch exceptions from a hierarchy by reference"
  ((++n_errors))
fi

n=`cat main.cpp | egrep "out_of_range\s*\w*\s*\)" | wc -l`
if [ ! "$n" -eq "0" ]; then
  echo "Incorrect: C++ Core Guidelines: E.15: Catch exceptions from a hierarchy by reference"
  ((++n_errors))
fi

n=`cat main.cpp | egrep "exception\s*\w*\s*\)" | wc -l`
if [ ! "$n" -eq "0" ]; then
  echo "Incorrect: C++ Core Guidelines: E.15: Catch exceptions from a hierarchy by reference"
  ((++n_errors))
fi

# Exceptions should be const
n=`cat main.cpp | egrep "\(\w*(std::)?invalid_argument" | wc -l`
if [ ! "$n" -eq "0" ]; then
  echo "Incorrect: C++ Core Guidelines: Con.4: Use const to define objects with values that do not change after construction"
  ((++n_errors))
fi

n=`cat main.cpp | egrep "\(\w*(std::)?out_of_range" | wc -l`
if [ ! "$n" -eq "0" ]; then
  echo "Incorrect: C++ Core Guidelines: Con.4: Use const to define objects with values that do not change after construction"
  ((++n_errors))
fi

n=`cat main.cpp | egrep "\(\w*(std::)?exception" | wc -l`
if [ ! "$n" -eq "0" ]; then
  echo "Incorrect: C++ Core Guidelines: Con.4: Use const to define objects with values that do not change after construction"
  ((++n_errors))
fi

# Do not use ellipsis
n=`cat main.cpp | egrep "\(\w*\.\.\.\w*\)" | wc -l`
if [ ! "$n" -eq "0" ]; then
  echo "Incorrect: do not use ellipsis"
  ((++n_errors))
fi

##########################################
# Test debug version
##########################################
make debug
./main

#####################
# Test code coverage
#####################

n=`gcov-7 -i -n -o debug main.cpp| head -n 2 | tail -n 1 | egrep "100\.00\%" | wc -l`
if [ ! "$n" -eq "1" ]; then
  echo "Incorrect: must have 100% code coverage. Current code coverage:"
  gcov-7 -i -n -o debug main.cpp | head -n 2 | tail -n 1
  ((++n_errors))
fi

exit $n_errors
