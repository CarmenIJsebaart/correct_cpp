#!/bin/bash

qmake

##########################################
# Test release version
##########################################
make release

n_errors=0

if [[ ! -f main ]]; then 
  echo "Incorrect: code does not compile cleanly with high warning levels"
  ((++n_errors))
fi

#####################
# Test exit states
#####################

./main > /dev/null
state_zero=`echo $?`

./main hello > /dev/null
state_one=`echo $?`

./main hello i_am_ignored > /dev/null
state_two=`echo $?`


if [[ ! $state_zero -eq 0 ]]; then
  echo "Incorrect: call without arguments must result in an exit state of 0"
  ((++n_errors))
fi

if [[ ! $state_one -eq 0 ]]; then
  echo "Incorrect: call with one argument must result in an exit state of 0"
  ((++n_errors))
fi

if [[ ! $state_two -eq 0 ]]; then
  echo "Incorrect: call with two arguments must result in an exit state of 0"
  ((++n_errors))
fi

#####################
# Test output
#####################

# Create expected result
echo "Hello" > expected_0.txt
echo "Hello world" > expected_1.txt
echo "Hello world" > expected_2.txt

# Create the actual result
./main > created_0.txt
./main world > created_1.txt
./main world i_am_ignored > created_2.txt

# Compare
if ! cmp --silent created_0.txt expected_0.txt; then
  echo "Incorrect: './hello_cli' literally say 'Hello'"
  ((++n_errors))
fi

# Compare the two
if ! cmp --silent created_1.txt expected_1.txt; then
  echo "Incorrect: './hello_cli world' literally say 'Hello world'"
  ((++n_errors))
fi

# Compare the two
if ! cmp --silent created_2.txt expected_2.txt; then
  echo "Incorrect: './hello_cli world i_am_ignored' literally say 'Hello world' and ignore the second argument"
  ((++n_errors))
fi

# Avoid endls
n=`cat main.cpp | egrep "endl" | wc -l`
if [ ! "$n" -eq "0" ]; then
  echo "Error: C++ Core Guidelines: SL.io.50: Avoid endl"
  ((++n_errors))
fi

rm expected_*.txt
rm created_*.txt

##########################################
# Test debug version
##########################################
make debug

./main
./main hello
./main hello i_am_ignored

#####################
# Test code coverage
#####################

n=`gcov-7 -i -n -o debug main.cpp| head -n 2 | tail -n 1 | egrep "100\.00\%" | wc -l`
if [ ! "$n" -eq "1" ]; then
  echo "Error: must have 100% code coverage. Current code coverage:"
  gcov-7 -i -n -o debug main.cpp | head -n 2 | tail -n 1
  ((++n_errors))
fi

exit $n_errors
