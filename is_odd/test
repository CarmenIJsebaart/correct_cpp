#!/bin/bash

#####################
# Test exit states
#####################

./main > /dev/null
state_zero=`echo $?`

./main 1 > /dev/null
state_one=`echo $?`

./main 2 > /dev/null
state_two=`echo $?`

./main nonsense > /dev/null
state_nonsense=`echo $?`

./main 2 1 > /dev/null
state_two_one=`echo $?`


if [[ ! $state_zero -eq 1 ]]; then
  echo "Incorrect: call without arguments must result in an exit state of 1"
  exit 1
fi

if [[ ! $state_one -eq 0 ]]; then
  echo "Incorrect: call with one valid argument must result in an exit state of 0"
  exit 1
fi

if [[ ! $state_two -eq 0 ]]; then
  echo "Incorrect: call with one valid argument must result in an exit state of 0"
  exit 1
fi

if [[ ! $state_nonsense -eq 1 ]]; then
  echo "Incorrect: call with one invalid argument must result in an exit state of 1"
  exit 1
fi

if [[ ! $state_two_one -eq 0 ]]; then
  echo "Incorrect: call with one valid first argument (out of multiple) must result in an exit state of 0"
  exit 1
fi

#####################
# Test output
#####################

# Create expected result
echo "true" > expected_1.txt
echo "false" > expected_2.txt

# Create the actual result
./main 1 > created_1.txt
./main 2 > created_2.txt

# Compare results
if ! cmp --silent created_1.txt expected_1.txt; then
  echo "Incorrect: call with odd argument does not give correct result"
  exit 1
fi

if ! cmp --silent created_2.txt expected_2.txt; then
  echo "Incorrect: call with even argument does not give correct result"
  exit 1
fi

#####################
# Test misc
#####################

# Avoid endls
n=`cat main.cpp | egrep "endl" | wc -l`
if [ ! "$n" -eq "0" ]; then
  echo "Error: C++ Core Guidelines: SL.io.50: Avoid endl"
  exit 1
fi

# Catch by reference
n=`cat main.cpp | egrep "std::invalid_argument\s*\w*\s*)" | wc -l`
if [ ! "$n" -eq "0" ]; then
  echo "Error: C++ Core Guidelines: E.15: Catch exceptions from a hierarchy by reference"
  exit 1
fi

# Catch by reference
n=`cat main.cpp | egrep "std::exception\s*\w*\s*)" | wc -l`
if [ ! "$n" -eq "0" ]; then
  echo "Error: C++ Core Guidelines: E.15: Catch exceptions from a hierarchy by reference"
  exit 1
fi

# Reference should be const

echo "Correct"